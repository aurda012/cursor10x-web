---
description: "Implementation of the semantic memory subsystem for structured knowledge"
globs: **/*
alwaysApply: true
---

# Semantic Memory System

This module manages the semantic memory (SM) subsystem for storing structured knowledge. Semantic memory is implemented as a knowledge graph, enabling complex relationships between concepts.

## Core Functionality

*   **Knowledge Representation:** Store structured knowledge about code and concepts
*   **Relationship Tracking:** Maintain relationships between different knowledge fragments
*   **Hierarchical Organization:** Organize knowledge in a hierarchical structure
*   **Semantic Search:** Enable search based on meaning rather than just keywords
*   @file .cursor/communication/systems/semantic_memory.js

## Semantic Memory Operations

When using semantic memory, you MUST:

*   **Extract:** Extract structured knowledge from conversations and code
*   **Store:** Store new knowledge fragments in the semantic memory
*   **Connect:** Establish connections between related knowledge fragments
*   **Retrieve:** Retrieve relevant knowledge based on semantic similarity

## Database Schema

The semantic memory uses the following SQLite database schema:

```sql
CREATE TABLE IF NOT EXISTS semantic_memory (
  id TEXT PRIMARY KEY,
  category TEXT,
  topic TEXT,
  content TEXT,
  timestamp INTEGER,
  importance TEXT,
  source TEXT
);

CREATE TABLE IF NOT EXISTS knowledge_relationships (
  id TEXT PRIMARY KEY,
  source_id TEXT,
  target_id TEXT,
  relationship_type TEXT,
  timestamp INTEGER,
  FOREIGN KEY (source_id) REFERENCES semantic_memory(id),
  FOREIGN KEY (target_id) REFERENCES semantic_memory(id)
);

CREATE INDEX IF NOT EXISTS idx_semantic_memory_category ON semantic_memory(category);
CREATE INDEX IF NOT EXISTS idx_semantic_memory_topic ON semantic_memory(topic);
CREATE INDEX IF NOT EXISTS idx_relationships_source_id ON knowledge_relationships(source_id);
CREATE INDEX IF NOT EXISTS idx_relationships_target_id ON knowledge_relationships(target_id);
```

## Knowledge Graph Structure

The knowledge graph represents:

*   **Code Components:** Files, functions, classes, and methods
*   **Project Patterns:** Architectural patterns, design decisions, and conventions
*   **User Preferences:** Coding style, communication preferences, and workflows
*   **Domain Knowledge:** Project-specific concepts and terminology

## Standard Operations

```javascript
// Store knowledge fragment
function storeKnowledge(category, topic, content, metadata = {}) {
  const id = `sm_${Date.now()}_${Math.floor(Math.random() * 10000)}`;
  const timestamp = Date.now();
  const importance = metadata.importance || "medium";
  const source = metadata.source || "conversation";
  
  const knowledge = {
    id,
    category,
    topic,
    content,
    timestamp,
    importance,
    source
  };
  
  globalThis.MEMORY_SYSTEM.storeKnowledge(topic, knowledge);
  
  return id;
}

// Create relationship between knowledge fragments
function createRelationship(sourceId, targetId, relationshipType) {
  const id = `rel_${Date.now()}_${Math.floor(Math.random() * 10000)}`;
  const timestamp = Date.now();
  
  const relationship = {
    id,
    source_id: sourceId,
    target_id: targetId,
    relationship_type: relationshipType,
    timestamp
  };
  
  // This is a simplified implementation; in a real system, this would store to a database
  const relationships = globalThis.MEMORY_SYSTEM.getContext("knowledge_relationships") || [];
  relationships.push(relationship);
  globalThis.MEMORY_SYSTEM.storeContext("knowledge_relationships", relationships);
  
  return id;
}

// Get knowledge by topic
function getKnowledge(topic) {
  return globalThis.MEMORY_SYSTEM.getKnowledge(topic);
}

// Get related knowledge
function getRelatedKnowledge(knowledgeId, relationshipType = null) {
  const relationships = globalThis.MEMORY_SYSTEM.getContext("knowledge_relationships") || [];
  
  // Filter relationships
  const filteredRelationships = relationships.filter(rel => 
    (rel.source_id === knowledgeId || rel.target_id === knowledgeId) &&
    (relationshipType === null || rel.relationship_type === relationshipType)
  );
  
  // Get related knowledge fragments
  const relatedKnowledge = [];
  
  for (const rel of filteredRelationships) {
    const relatedId = rel.source_id === knowledgeId ? rel.target_id : rel.source_id;
    const topic = relatedId.split('_')[1]; // Extract topic from ID (simplified)
    
    const knowledge = globalThis.MEMORY_SYSTEM.getKnowledge(topic);
    if (knowledge) {
      relatedKnowledge.push({
        knowledge,
        relationship: rel.relationship_type,
        direction: rel.source_id === knowledgeId ? "outgoing" : "incoming"
      });
    }
  }
  
  return relatedKnowledge;
}

// Extract knowledge from conversation
function extractKnowledgeFromConversation(conversation) {
  // This is a simplified implementation; in a real system, this would use sophisticated NLP
  const extractedKnowledge = [];
  
  // Look for specific patterns in the conversation
  if (conversation.content.includes("error") || conversation.content.includes("problem")) {
    extractedKnowledge.push({
      category: "troubleshooting",
      topic: "error_handling",
      content: `Error discussion: ${conversation.content.substring(0, 100)}...`,
      metadata: {
        importance: "high",
        source: "user_query"
      }
    });
  }
  
  if (conversation.content.includes("function") || conversation.content.includes("method")) {
    extractedKnowledge.push({
      category: "code_patterns",
      topic: "functions",
      content: `Function discussion: ${conversation.content.substring(0, 100)}...`,
      metadata: {
        importance: "medium",
        source: "conversation"
      }
    });
  }
  
  // Store extracted knowledge
  for (const knowledge of extractedKnowledge) {
    storeKnowledge(
      knowledge.category,
      knowledge.topic,
      knowledge.content,
      knowledge.metadata
    );
  }
  
  return extractedKnowledge;
}
```

## Integration Points

*   **Short-Term Memory:** Extracts structured knowledge from short-term memory
*   **Episodic Memory:** Extracts structured knowledge from conversations
*   **Memory Controller:** The memory controller ensures consistency between semantic and other memory systems

## Implementation Details

```javascript
(function() {
  console.log("🧠 Initializing Semantic Memory Subsystem...");
  
  try {
    // Check if memory system exists
    if (!globalThis.MEMORY_SYSTEM) {
      console.error("Memory system not initialized. Cannot initialize semantic memory.");
      return;
    }
    
    // Initialize semantic memory if not already present
    if (!globalThis.MEMORY_SYSTEM.semantic) {
      globalThis.MEMORY_SYSTEM.semantic = {};
      console.log("Created semantic memory object");
    }
    
    // Initialize knowledge relationships if not already present
    if (!globalThis.MEMORY_SYSTEM.knowledgeRelationships) {
      globalThis.MEMORY_SYSTEM.knowledgeRelationships = [];
      console.log("Created knowledge relationships array");
    }
    
    // Enhance memory system with semantic memory functions if they don't exist
    if (!globalThis.MEMORY_SYSTEM.storeKnowledge) {
      globalThis.MEMORY_SYSTEM.storeKnowledge = function(topic, knowledge) {
        // Ensure topic exists in semantic memory
        if (!this.semantic[topic]) {
          this.semantic[topic] = {};
        }
        
        // Ensure knowledge has an ID
        if (!knowledge.id) {
          knowledge.id = `sm_${Date.now()}_${Math.floor(Math.random() * 10000)}`;
        }
        
        // Add timestamp if not present
        if (!knowledge.timestamp) {
          knowledge.timestamp = Date.now();
        }
        
        // Store knowledge
        this.semantic[topic][knowledge.id] = knowledge;
        console.log(`Stored knowledge: ${knowledge.id} in topic ${topic}`);
        
        return knowledge.id;
      };
      
      console.log("Added storeKnowledge function to MEMORY_SYSTEM");
    }
    
    if (!globalThis.MEMORY_SYSTEM.getKnowledge) {
      globalThis.MEMORY_SYSTEM.getKnowledge = function(topic) {
        return this.semantic[topic] || null;
      };
      
      console.log("Added getKnowledge function to MEMORY_SYSTEM");
    }
    
    if (!globalThis.MEMORY_SYSTEM.getKnowledgeById) {
      globalThis.MEMORY_SYSTEM.getKnowledgeById = function(id) {
        for (const topic in this.semantic) {
          if (this.semantic[topic][id]) {
            return this.semantic[topic][id];
          }
        }
        return null;
      };
      
      console.log("Added getKnowledgeById function to MEMORY_SYSTEM");
    }
    
    if (!globalThis.MEMORY_SYSTEM.createRelationship) {
      globalThis.MEMORY_SYSTEM.createRelationship = function(sourceId, targetId, relationshipType) {
        const relationship = {
          id: `rel_${Date.now()}_${Math.floor(Math.random() * 10000)}`,
          source_id: sourceId,
          target_id: targetId,
          relationship_type: relationshipType,
          timestamp: Date.now()
        };
        
        this.knowledgeRelationships.push(relationship);
        console.log(`Created relationship: ${relationship.id} from ${sourceId} to ${targetId}`);
        
        return relationship.id;
      };
      
      console.log("Added createRelationship function to MEMORY_SYSTEM");
    }
    
    if (!globalThis.MEMORY_SYSTEM.getRelationships) {
      globalThis.MEMORY_SYSTEM.getRelationships = function(knowledgeId, relationshipType = null) {
        return this.knowledgeRelationships.filter(rel => 
          (rel.source_id === knowledgeId || rel.target_id === knowledgeId) &&
          (relationshipType === null || rel.relationship_type === relationshipType)
        );
      };
      
      console.log("Added getRelationships function to MEMORY_SYSTEM");
    }
    
    if (!globalThis.MEMORY_SYSTEM.searchKnowledge) {
      globalThis.MEMORY_SYSTEM.searchKnowledge = function(query, limit = 10) {
        const results = [];
        
        // Search through all topics and knowledge items
        for (const topic in this.semantic) {
          const topicKnowledge = this.semantic[topic];
          
          for (const id in topicKnowledge) {
            const knowledge = topicKnowledge[id];
            
            // Simple keyword matching (in a real system, this would be semantic matching)
            if ((knowledge.content && typeof knowledge.content === 'string' &&
                 knowledge.content.toLowerCase().includes(query.toLowerCase())) ||
                (topic.toLowerCase().includes(query.toLowerCase()))) {
              
              results.push({
                ...knowledge,
                topic
              });
              
              // Break early if we've reached the limit
              if (results.length >= limit) {
                break;
              }
            }
          }
          
          // Break early if we've reached the limit
          if (results.length >= limit) {
            break;
          }
        }
        
        return results;
      };
      
      console.log("Added searchKnowledge function to MEMORY_SYSTEM");
    }
    
    // Register with the memory registry if available
    if (globalThis.MEMORY_REGISTRY && typeof globalThis.MEMORY_REGISTRY.registerSubsystem === 'function') {
      globalThis.MEMORY_REGISTRY.registerSubsystem('semantic', {
        name: "Semantic Memory",
        description: "Stores structured knowledge as a knowledge graph",
        functions: [
          "storeKnowledge",
          "getKnowledge",
          "getKnowledgeById",
          "createRelationship",
          "getRelationships",
          "searchKnowledge"
        ]
      });
      
      console.log("Registered semantic memory with memory registry");
    }
    
    // Initialize with some basic knowledge structures
    const basicCategories = [
      "project_structure",
      "code_patterns",
      "user_preferences",
      "troubleshooting",
      "architecture",
      "api_reference",
      "framework_knowledge"
    ];
    
    for (const category of basicCategories) {
      if (!globalThis.MEMORY_SYSTEM.semantic[category]) {
        globalThis.MEMORY_SYSTEM.semantic[category] = {};
      }
    }
    
    console.log(`Initialized ${basicCategories.length} basic knowledge categories`);
    
    // Add system banner if banners exist
    if (Array.isArray(globalThis.nextResponsePrepend)) {
      // Check if we already have a memory banner
      const hasMemoryBanner = globalThis.nextResponsePrepend.some(banner => 
        banner.includes("MEMORY SYSTEM") || banner.includes("SEMANTIC MEMORY")
      );
      
      if (!hasMemoryBanner) {
        globalThis.nextResponsePrepend.push("🧠 [SEMANTIC MEMORY: ACTIVE]");
      }
    }
    
    console.log("✅ Semantic Memory Subsystem initialized successfully");
  } catch (error) {
    console.error("❌ Error initializing semantic memory:", error);
  }
})();
```

## Required Workflow

*   REGULARLY extract structured knowledge from conversations and code
*   ALWAYS connect new knowledge to existing knowledge fragments
*   FREQUENTLY update the access counts and timestamps for knowledge retrieval
*   PERIODICALLY analyze the knowledge graph for inconsistencies and gaps
*   NEVER store sensitive or security-critical information in semantic memory
*   MAINTAIN a hierarchical organization of knowledge for efficient navigation

## Knowledge Categories

The semantic memory system organizes knowledge into these primary categories:

*   **Project Structure:** Information about the organization of the codebase
*   **Code Patterns:** Common patterns and idioms used in the codebase
*   **User Preferences:** User-specific preferences and settings
*   **Troubleshooting:** Common issues and their solutions
*   **Architecture:** System architecture and design decisions
*   **API Reference:** Information about APIs and their usage
*   **Framework Knowledge:** Knowledge about frameworks and libraries used

## Knowledge Extraction

The semantic memory system automatically extracts structured knowledge from:

*   **User Queries:** Direct questions and instructions from the user
*   **Code Review:** Analysis of code files and changes
*   **Documentation:** Information from project documentation
*   **Conversation History:** Recurring themes in conversation
*   **External Sources:** Information from MCP servers and web searches

This extraction process ensures that the knowledge graph is continuously updated and refined with new information.

## Relationship Types

The semantic memory system supports these relationship types:

*   **is_part_of:** Indicates that one component is part of another
*   **depends_on:** Indicates that one component depends on another
*   **is_associated_with:** Indicates a general association between components
*   **is_similar_to:** Indicates similarity between components
*   **contradicts:** Indicates that one piece of knowledge contradicts another
*   **extends:** Indicates that one component extends or inherits from another

These relationships enable sophisticated knowledge navigation and inference. 