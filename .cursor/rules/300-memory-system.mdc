---
description: "Memory system integration for constant active usage"
globs: **/*
alwaysApply: true
---

# Memory System Architecture

This rule implements the comprehensive memory architecture for the multi-agent system. It provides the framework for persistent context across conversations and structured knowledge management.

## System Overview

The memory system follows standardized naming conventions and is fully compatible with the System Compatibility Layer:

- **Primary Object Name**: `globalThis.MEMORY_SYSTEM`
- **Version**: 1.1.0
- **Compatibility Integration**: [system-compatibility.js](mdc:.cursor/system-compatibility.js)

The memory system is organized into a hierarchical architecture with three primary subsystems:

```
Memory System
‚îú‚îÄ‚îÄ Short-Term Memory
‚îÇ   ‚îú‚îÄ‚îÄ Context Variables
‚îÇ   ‚îú‚îÄ‚îÄ Working Memory
‚îÇ   ‚îî‚îÄ‚îÄ Temporary Storage
‚îú‚îÄ‚îÄ Episodic Memory
‚îÇ   ‚îú‚îÄ‚îÄ Conversation History
‚îÇ   ‚îú‚îÄ‚îÄ User Interactions
‚îÇ   ‚îî‚îÄ‚îÄ System Events
‚îî‚îÄ‚îÄ Semantic Memory
    ‚îú‚îÄ‚îÄ Domain Knowledge
    ‚îú‚îÄ‚îÄ Project Structure
    ‚îî‚îÄ‚îÄ Implementation Details
```

## Implementation

```javascript
// Memory System Architecture - Core Implementation
(function initializeMemoryArchitecture() {
  console.log("üìö Initializing Memory System Architecture...");
  
  try {
    // Load compatibility layer if not already loaded
    if (typeof globalThis.initializeCompatibilityLayer === 'function' && 
        !globalThis.MEMORY_SYSTEM) {
      console.log("Loading compatibility layer for Memory System");
      globalThis.initializeCompatibilityLayer();
    }
    
    // Create the memory registry if it doesn't exist
    if (!globalThis.MEMORY_SYSTEM) {
      const memorySystem = {
        initialized: true,
        version: "1.1.0",
        timestamp: new Date().toISOString(),
        
        // System configuration
        config: {
          retention_policy: {
            short_term: "session",     // Cleared after each session
            episodic: "persistent",    // Persisted across sessions
            semantic: "persistent"     // Persisted across sessions
          },
          context_variables: [
            "current_focus",
            "active_agent",
            "current_task",
            "implementation_stage"
          ]
        },
        
        // Memory subsystems registration
        subsystems: {
          short_term: {
            name: "Short-Term Memory",
            initialized: false,
            status: "pending"
          },
          episodic: {
            name: "Episodic Memory",
            initialized: false,
            status: "pending"
          },
          semantic: {
            name: "Semantic Memory",
            initialized: false,
            status: "pending"
          }
        },
        
        // Integration points with other systems
        integrations: {
          multi_agent: {
            name: "Multi-Agent System",
            status: "pending"
          },
          scratchpad: {
            name: "Scratchpad Communication",
            status: "pending"
          },
          compatibility: {
            name: "System Compatibility Layer",
            status: "active" // Always active as it's loaded first
          },
          mcp_server: {
            name: "MCP Server Integration",
            status: "pending"
          }
        },
        
        // Memory System API methods
        
        // Register a subsystem as initialized
        registerSubsystem: function(name, implementation) {
          if (this.subsystems[name]) {
            this.subsystems[name].initialized = true;
            this.subsystems[name].status = "active";
            this.subsystems[name].implementation = implementation;
            console.log(`‚úÖ Registered memory subsystem: ${name}`);
            return true;
          }
          console.error(`‚ùå Unknown subsystem: ${name}`);
          return false;
        },
        
        // Register an integration with another system
        registerIntegration: function(name, interface) {
          if (this.integrations[name]) {
            this.integrations[name].status = "active";
            this.integrations[name].interface = interface;
            console.log(`‚úÖ Registered system integration: ${name}`);
            return true;
          }
          console.error(`‚ùå Unknown integration: ${name}`);
          return false;
        },
        
        // Get the status of the memory system
        getStatus: function() {
          const subsystemStatus = Object.keys(this.subsystems).map(key => {
            return {
              name: this.subsystems[key].name,
              status: this.subsystems[key].status
            };
          });
          
          const integrationStatus = Object.keys(this.integrations).map(key => {
            return {
              name: this.integrations[key].name,
              status: this.integrations[key].status
            };
          });
          
          return {
            initialized: this.initialized,
            version: this.version,
            subsystems: subsystemStatus,
            integrations: integrationStatus
          };
        },
        
        // Verify that all required components are initialized
        verifySystem: function() {
          let allInitialized = true;
          
          // Check subsystems
          for (const key in this.subsystems) {
            if (!this.subsystems[key].initialized) {
              console.warn(`‚ö†Ô∏è Memory subsystem not initialized: ${this.subsystems[key].name}`);
              allInitialized = false;
            }
          }
          
          // Check critical integrations
          const criticalIntegrations = ['multi_agent', 'scratchpad', 'compatibility'];
          for (const key of criticalIntegrations) {
            if (this.integrations[key].status !== 'active') {
              console.warn(`‚ö†Ô∏è Critical integration not active: ${this.integrations[key].name}`);
              allInitialized = false;
            }
          }
          
          return allInitialized;
        }
      };
      
      // Set the global object following naming conventions
      globalThis.MEMORY_SYSTEM = memorySystem;
      
      console.log("‚úÖ Memory System initialized with standardized naming");
    } else {
      console.log("‚ÑπÔ∏è Memory System already exists");
    }
    
    // Verify compatibility with naming conventions
    if (typeof globalThis.validateSystemConsistency === 'function') {
      const isConsistent = globalThis.validateSystemConsistency('memory');
      if (!isConsistent) {
        console.warn("‚ö†Ô∏è Memory System naming is inconsistent with compatibility layer standards");
      }
    }
    
    // Add memory system details to response banner
    ensureMemorySystemBanner();
    
  } catch (error) {
    console.error("‚ùå Error initializing memory architecture:", error);
  }
  
  /**
   * Ensures the memory system banner is included in the next response
   */
  function ensureMemorySystemBanner() {
    if (!globalThis.nextResponsePrepend) {
      globalThis.nextResponsePrepend = [];
    }
    
    // Check if banner already exists
    let bannerExists = false;
    for (const line of globalThis.nextResponsePrepend) {
      if (line.includes("Memory System")) {
        bannerExists = true;
        break;
      }
    }
    
    if (!bannerExists) {
      globalThis.nextResponsePrepend.push("üß† **Memory System Active:** Short and long-term memory enabled");
    }
  }
  
  console.log("‚úÖ Memory System Architecture initialization complete");
})();
```

## Memory Architecture Design

### 1. Short-Term Memory (STM)

The short-term memory subsystem handles immediate context and working memory:

- **Purpose**: Maintain context within a single conversation session
- **Persistence**: Cleared between sessions
- **Components**:
  - Context variables (current focus, active agent, etc.)
  - Working memory for ongoing tasks
  - Temporary storage for intermediate results

### 2. Episodic Memory (EM)

The episodic memory subsystem stores sequences of events and interactions:

- **Purpose**: Record conversation history and user interactions
- **Persistence**: Maintained across sessions
- **Components**:
  - Conversation threads and messages
  - User preferences and patterns
  - System events and error occurrences

### 3. Semantic Memory (SM)

The semantic memory subsystem organizes structured knowledge:

- **Purpose**: Store domain knowledge and project information
- **Persistence**: Maintained across sessions
- **Components**:
  - Domain-specific knowledge
  - Project structure and architecture
  - Implementation details and decision rationale

## Integration with Compatibility Layer

The Memory System integrates with the System Compatibility Layer to ensure consistent naming conventions:

```javascript
// Standard way to access the memory system
const memoryStatus = globalThis.MEMORY_SYSTEM.getStatus();

// Checking compatibility
if (typeof globalThis.validateSystemConsistency === 'function') {
  const isConsistent = globalThis.validateSystemConsistency('memory');
  console.log(`Memory System is ${isConsistent ? 'consistent' : 'inconsistent'} with naming standards`);
}
```

## Integration Principles

The memory system integrates with other components through:

1. **Compatibility Layer**: Ensures consistent naming and minimal interfaces
2. **Agent Integration**: Provides context awareness to specialized agents
3. **Scratchpad Integration**: Records agent communications in episodic memory

## Usage Requirements

When interacting with the system, you MUST ALWAYS:

1. Retrieve relevant context from memory before generating responses
2. Store user interactions in episodic memory after processing
3. Extract structured knowledge into semantic memory
4. Maintain working context throughout conversation sessions
5. Verify memory system is active and available

// Dependent Rules
[301-short-term-memory.mdc](mdc:.cursor/rules/301-short-term-memory.mdc)
[302-episodic-memory.mdc](mdc:.cursor/rules/302-episodic-memory.mdc)
[303-semantic-memory.mdc](mdc:.cursor/rules/303-semantic-memory.mdc)
[304-memory-integration.mdc](mdc:.cursor/rules/304-memory-integration.mdc)
[305-memory-initializer.mdc](mdc:.cursor/rules/305-memory-initializer.mdc)