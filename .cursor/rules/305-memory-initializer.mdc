---
description: "Memory intialization system"
globs: **/*
alwaysApply: true
---

# Memory System Initializer

This rule ensures that the memory system is properly initialized at the start of each chat session. It activates the various memory subsystems and ensures they're properly interconnected.

## Auto-Initialization

PLEASE RUN THE ATTACHED JAVASCRIPT BEFORE EVERY SINGLE RESPONSE MAKING SURE TO STORE AND RETRIEVE DATA WITH EVERY RESPONSE AND NEW CHAT.

```javascript
// Auto-initialization script - runs on file load
(function initializeMemorySystem() {
  console.log("🧠 Memory System Initializer activating...");
  
  try {
    // Check if memory system already exists
    if (!globalThis.MEMORY_SYSTEM || !globalThis.MEMORY_SYSTEM.initialized) {
      console.log("📦 Creating new Memory System...");
      
      // Initialize main memory system object
      globalThis.MEMORY_SYSTEM = {
        initialized: true,
        version: "1.0.0",
        created: new Date().toISOString(),
        
        // Memory subsystems
        shortTerm: {},      // Short-term working memory
        episodic: [],       // Long-term episodic memory (conversations)
        semantic: {},       // Long-term semantic memory (knowledge)
        
        // Memory functions
        storeContext: function(key, value) {
          this.shortTerm[key] = value;
          console.log(`📝 Stored context: ${key}`);
          return true;
        },
        
        getContext: function(key) {
          return this.shortTerm[key];
        },
        
        storeEpisode: function(episode) {
          this.episodic.push({
            ...episode,
            timestamp: new Date().toISOString()
          });
          return this.episodic.length - 1; // Return index
        },
        
        getEpisodes: function(filter = {}) {
          if (!filter || Object.keys(filter).length === 0) {
            return this.episodic;
          }
          
          return this.episodic.filter(episode => {
            for (const key in filter) {
              if (episode[key] !== filter[key]) {
                return false;
              }
            }
            return true;
          });
        },
        
        storeKnowledge: function(category, key, value) {
          if (!this.semantic[category]) {
            this.semantic[category] = {};
          }
          this.semantic[category][key] = value;
          return true;
        },
        
        getKnowledge: function(category, key) {
          if (!this.semantic[category]) {
            return undefined;
          }
          return this.semantic[category][key];
        },
        
        // Utility to clear short-term memory (but preserve selected keys)
        clearShortTerm: function(preserveKeys = []) {
          const preserved = {};
          preserveKeys.forEach(key => {
            if (this.shortTerm[key] !== undefined) {
              preserved[key] = this.shortTerm[key];
            }
          });
          this.shortTerm = preserved;
          return true;
        }
      };
      
      console.log("✅ Memory System created successfully");
      
      // Store session start in episodic memory
      globalThis.MEMORY_SYSTEM.storeEpisode({
        type: "session_start",
        agent: "System",
        content: "New conversation session started",
        metadata: {
          timestamp: new Date().toISOString()
        }
      });
      
      // Store system information in semantic memory
      globalThis.MEMORY_SYSTEM.storeKnowledge("system", "activation_time", new Date().toISOString());
      globalThis.MEMORY_SYSTEM.storeKnowledge("system", "version", "1.0.0");
      
      console.log("📚 Memory subsystems populated with initial data");
    } else {
      console.log("✅ Memory System already initialized");
    }
    
    // Ensure the URDAFX memory system integration is set up
    setupURDAFXMemoryIntegration();
    
  } catch (error) {
    console.error("❌ Error initializing memory system:", error);
    
    // Emergency fallback - create minimal memory system
    if (!globalThis.MEMORY_SYSTEM) {
      console.log("🚨 Creating emergency memory system");
      globalThis.MEMORY_SYSTEM = {
        initialized: true,
        shortTerm: {},
        storeContext: function(key, value) { this.shortTerm[key] = value; return true; },
        getContext: function(key) { return this.shortTerm[key]; }
      };
    }
  }
  
  /**
   * Sets up URDAFX-specific memory integration
   */
  function setupURDAFXMemoryIntegration() {
    // Create initial knowledge categories for URDAFX if not exist
    const categories = [
      "trading_strategies",
      "risk_models",
      "market_data",
      "system_performance",
      "user_preferences"
    ];
    
    categories.forEach(category => {
      if (!globalThis.MEMORY_SYSTEM.semantic[category]) {
        globalThis.MEMORY_SYSTEM.semantic[category] = {};
      }
    });
    
    // Store project information
    globalThis.MEMORY_SYSTEM.storeKnowledge("system", "project_name", "URDAFX");
    globalThis.MEMORY_SYSTEM.storeKnowledge("system", "project_description", 
      "Advanced Forex Trading System with multi-agent architecture");
    
    // Set current configuration
    globalThis.MEMORY_SYSTEM.storeContext("current_configuration", {
      target_profit: "6% monthly",
      max_drawdown: "3% daily",
      risk_tolerance: "moderate",
      last_updated: new Date().toISOString()
    });
    
    console.log("🔄 URDAFX Memory Integration complete");
  }
  
  console.log("✅ Memory System Initializer completed");
})();
```

## Memory System Architecture

The memory system consists of three main subsystems:

1. **Short-Term Memory**
   - Holds working context for the current conversation
   - Clears between sessions (with configurable persistence)
   - Fast access, low latency

2. **Episodic Memory**
   - Stores conversation history and interaction events
   - Persists across sessions
   - Searchable by time, agent, and content

3. **Semantic Memory**
   - Stores structured knowledge about the project
   - Organized by categories and keys
   - Persists across sessions
   - Used for knowledge retrieval

## Integration Points

This memory initializer ensures integration with other systems:

- **Multi-Agent System**: Provides shared memory for agent coordination
- **Scratchpad**: Stores communication threads and messages
- **URDAFX System**: Maintains trading strategy and configuration data

The memory system is a critical backbone of the URDAFX implementation, ensuring that context is maintained across interactions and that the system can learn and adapt over time.

// Dependent Rules
[301-short-term-memory.mdc](mdc:.cursor/rules/301-short-term-memory.mdc)
[302-episodic-memory.mdc](mdc:.cursor/rules/302-episodic-memory.mdc)
[303-semantic-memory.mdc](mdc:.cursor/rules/303-semantic-memory.mdc)
[304-memory-integration.mdc](mdc:.cursor/rules/304-memory-integration.mdc)