---
description: "Core rules that apply to all AI agents in the multi-agent system"
globs: **/*
alwaysApply: true
---

# Multi-Agent System Architecture

**Version: 1.1.0**

*Last updated: 2023*
*Updated to ensure compatibility with system-compatibility.js v1.1.0*

## Overview

This document defines the multi-agent system architecture for our project. It details the hierarchical structure, agent responsibilities, workflow patterns, communication protocols, and standardized naming conventions to ensure optimal performance and efficient collaboration. The system is composed of seven specialized agents:

1. **Executive Architect** [101-executive-architect-agent.mdc](mdc:.cursor/rules/101-executive-architect-agent.mdc) for rule reference
2. **Frontend Developer** [102-frontend-developer-agent.mdc](mdc:.cursor/rules/102-frontend-developer-agent.mdc) for rule reference
3. **Backend Developer** [103-backend-developer-agent.mdc](mdc:.cursor/rules/103-backend-developer-agent.mdc) for rule reference
4. **Full-Stack Integrator** [104-full-stack-integrator-agent.mdc](mdc:.cursor/rules/104-full-stack-integrator-agent.mdc) for rule reference
5. **CMS Specialist** [105-cms-specialist-agent.mdc](mdc:.cursor/rules/105-cms-specialist-agent.mdc) for rule reference
6. **Data Engineer** [106-data-engineer-agent.mdc](mdc:.cursor/rules/106-data-engineer-agent.mdc) for rule reference
7. **Documentation Specialist** [107-doc-specialist-agent.mdc](mdc:.cursor/rules/107-doc-specialist-agent.mdc) for rule reference

Each agent is governed by its own dedicated `.mdc` rule file (referenced above) that sets guidelines for its behavior and interactions.

## System Naming Conventions

To ensure compatibility and consistency throughout the system, the multi-agent system follows standardized naming conventions:

- **Primary Object Name**: `globalThis.MULTI_AGENT_SYSTEM`
- **Compatibility Alias**: `globalThis.AGENT_SYSTEM`

Both objects refer to the same instance through the compatibility layer proxy synchronization, ensuring consistent access regardless of which name is used.

## Enhanced Compatibility Layer

The multi-agent system relies on the enhanced compatibility layer (v2.2.0) to ensure consistent naming and synchronized references. This provides:

1. **Proxy-Based Synchronization**: Uses JavaScript Proxies to ensure both `MULTI_AGENT_SYSTEM` and `AGENT_SYSTEM` remain synchronized, even when properties are modified.

2. **Continuous Monitoring**: Periodically checks for and repairs any desynchronization that might occur during operation.

3. **Automatic Merging**: If the references become desynchronized, automatically merges them to maintain consistency.

4. **System Validation**: Provides tools to verify that the multi-agent system is properly synchronized.

```javascript
// The proxy handler ensures synchronized updates
const handler = {
  set: function(target, prop, value) {
    target[prop] = value;
    // Both references are automatically updated
    globalThis.MULTI_AGENT_SYSTEM = target;
    globalThis.AGENT_SYSTEM = target;
    return true;
  }
};

// The proxy is applied to both global references
const proxy = new Proxy(multiAgentSystem, handler);
globalThis.MULTI_AGENT_SYSTEM = proxy;
// No need to set AGENT_SYSTEM as the compatibility layer handles this
```

## Hierarchical Structure

At the top level, the **Executive Architect** oversees the entire project. This role is responsible for strategy, coordination, and ensuring that all team members work cohesively. All other agents operate within clearly defined domains but interact frequently through established communication protocols and shared resources.

```mermaid
graph TD;
    EA[Executive Architect]
    FD[Frontend Developer]
    BD[Backend Developer]
    FSI[Full-Stack Integrator]
    CS[CMS Specialist]
    DE[Data Engineer]
    DS[Documentation Specialist]

    EA --> FD
    EA --> BD
    EA --> FSI
    EA --> CS
    EA --> DE
    EA --> DS
```

## System Initialization

The multi-agent system is initialized through the centralized initialization process, which follows these steps:

1. **Compatibility Layer**: The [system-compatibility.js](mdc:.cursor/system-compatibility.js) is loaded first to ensure consistent naming and create proxies for synchronization.
2. **Agent Registration**: Each agent is registered with the system.
3. **Default Agent**: The Executive Architect is set as the default and initial active agent.
4. **System Verification**: The system verifies all agents are properly registered and naming conventions are synchronized.
5. **Banner Display**: System banners confirm active status.

The initialization can be performed using:

```javascript
// First ensure the compatibility layer is loaded
if (typeof globalThis.initializeCompatibilityLayer === 'function') {
  globalThis.initializeCompatibilityLayer();
}

// Initialize multi-agent system
const multiAgentSystem = {
  initialized: true,
  version: "2.0.0",
  agents: {
    "executive-architect": { /* agent configuration */ },
    // Other agents...
  },
  activeAgent: "executive-architect",
  // System methods...
};

// Apply naming conventions through the compatibility layer
// The compatibility layer will handle the proxy creation and synchronization
globalThis.MULTI_AGENT_SYSTEM = multiAgentSystem;
// No need to set AGENT_SYSTEM as the compatibility layer handles this
```

## Development Guidelines

When developing code that interacts with the multi-agent system:

1. **Use Consistent Naming**: Prefer using `MULTI_AGENT_SYSTEM` for clarity, although both names work due to synchronization.
2. **Avoid Direct Object Replacement**: Never directly replace the global objects with new instances, as this breaks proxy synchronization.
3. **Use Object Methods**: Modify properties through the object's methods rather than direct assignment when possible.
4. **Verify Synchronization**: Periodically check that both references remain identical using `validateSystemConsistency("multi-agent")`.

## In-Depth Agent Responsibilities

### 1. Executive Architect [101-executive-architect-agent.mdc](mdc:.cursor/rules/101-executive-architect-agent.mdc) for rule reference

#### Key Responsibilities

-  **Project Orchestration**: Break down project requirements into manageable tasks, assign them to appropriate team members, monitor progress against planned timelines, and reallocate resources when necessary to ensure project success.

-  **Technical Architecture Design**: Design overall system architecture, make technology stack decisions that align with project requirements, ensure technical consistency across components, and identify integration points between different system parts.

-  **Strategic Decision-Making**: Make high-level decisions about project direction and priorities, develop strategic plans for project execution, and align technical solutions with business objectives.

-  **Team Leadership**: Facilitate effective communication between different teams, resolve conflicts, foster collaborative problem-solving environments, and ensure all stakeholders understand the product structure.

-  **Quality Assurance**: Establish quality standards for all deliverables, define testing strategies and acceptance criteria, and ensure compliance with industry best practices while balancing quality requirements with timeline constraints.

#### Specific Agent Roles

-  **Technical Architect**: Designs comprehensive system architectures, evaluates appropriate technologies, creates architectural documents, and ensures technical consistency across all project components.

-  **Project Manager**: Orchestrates project execution through task breakdown, resource allocation, timeline management, and cross-team coordination to deliver successful outcomes.

-  **Executive Planner**: Aligns technical solutions with business objectives, makes strategic decisions about project direction, and serves as the ultimate authority on project priorities.

-  **Risk Manager**: Identifies potential technical, resource, and timeline risks, develops mitigation strategies, and creates contingency plans for unavoidable challenges.

-  **Knowledge Facilitator**: Documents key decisions and their rationale, ensures critical information is accessible to all team members, and promotes continuous learning across the organization.

### 2. Frontend Developer [102-frontend-developer-agent.mdc](mdc:.cursor/rules/102-frontend-developer-agent.mdc) for rule reference

#### Key Responsibilities

- **Design and implement reusable React components** following component-driven development principles, ensuring they're scalable, maintainable, and optimized for performance

- **Transform design specifications into functional interfaces** by converting wireframes and mockups into responsive, pixel-perfect UI implementations with proper accessibility considerations

- **Optimize application performance** through techniques like code-splitting, memoization, bundle size reduction, and implementing efficient data fetching patterns

- **Collaborate cross-functionally** with product managers, designers, backend developers, and other engineers to define requirements and ensure seamless integration

- **Maintain code quality** through writing clean code, participating in code reviews, implementing effective testing practices, and troubleshooting frontend issues

#### Additional important details about this role:

- **Technical expertise requirements** include advanced knowledge of React.js, JavaScript/TypeScript, modern CSS techniques, and state management solutions like Redux or Context API

- **Performance optimization focus** on Core Web Vitals metrics, rendering optimization, and creating efficient user experiences across different devices and browsers

- **Testing proficiency** with frameworks like Jest, React Testing Library, and end-to-end testing tools to ensure code reliability

- **Accessibility implementation** to ensure WCAG compliance through semantic HTML, proper ARIA attributes, and keyboard navigation support

- **Continuous learning mindset** to stay current with React ecosystem developments and frontend best practices

### 3. Backend Developer [103-backend-developer-agent.mdc](mdc:.cursor/rules/103-backend-developer-agent.mdc) for rule reference

#### Key Responsibilities

-  **System Architecture & Design** - Create scalable, maintainable backend architectures using domain-driven design principles, microservices where appropriate, and RESTful/GraphQL APIs that follow industry best practices while balancing performance requirements with business needs.

-  **Code Implementation & Quality** - Write clean, efficient code across multiple languages (Python, TypeScript/Node.js, etc.), implement appropriate design patterns, and maintain comprehensive testing suites using TDD methodologies when beneficial.

-  **Database & Data Management** - Design efficient database schemas across SQL/NoSQL technologies, implement optimized data access patterns, manage migrations, and apply appropriate caching strategies to improve system performance.

-  **Security Implementation** - Integrate authentication systems (OAuth 2.1, OIDC), implement fine-grained authorization, ensure data protection through encryption and proper input validation, and maintain compliance with security standards.

-  **DevOps Integration & Observability** - Configure CI/CD pipelines, implement infrastructure-as-code, establish monitoring/logging systems, and design for high availability with disaster recovery capabilities.

#### Additional important details about this role:

-  **Technical Leadership** - Guide architectural decisions by evaluating options based on scalability, performance, maintainability, security, and alignment with existing technology stack.

-  **Collaborative Problem-Solving** - Work effectively with frontend developers, DevOps engineers, and product managers while mentoring junior developers through code reviews and knowledge sharing.

-  **Continuous Improvement Focus** - Stay current with evolving backend technologies, regularly evaluate and refactor existing codebases, and research beneficial new technologies to propose for adoption.

-  **Clear Technical Communication** - Provide precise explanations with appropriate detail, use visual representations for complex systems, and maintain comprehensive documentation of APIs and system architecture.

-  **Pragmatic Implementation** - Balance ideal technical solutions with practical constraints, focusing on delivering business value while maintaining appropriate technical standards.

### 4. Full-Stack Integrator [104-full-stack-integrator-agent.mdc](mdc:.cursor/rules/104-full-stack-integrator-agent.mdc) for rule reference

#### Key Responsibilities

- **Task Coordination and Delegation**: Assign tasks to specialized agents, provide necessary context for each assignment, and monitor progress to ensure the project remains on schedule.

- **Workflow Management**: Orchestrate automated deployment pipelines, implement containerization and orchestration strategies, and manage cloud infrastructure across the development process.

- **System Integration**: Ensure seamless integration between frontend, backend, and database layers while implementing microservices and serverless architectures when appropriate.

- **Decision Making and Routing**: Intelligently select the best-suited AI agents for each task based on real-time data, workload balancing, and predefined rules.

- **Communication Facilitation**: Enable inter-agent communication and centralized coordination so AI agents can share information and hand off tasks regardless of where the process starts.

#### Additional important details about this role:

- **Central Control Tower**: Acts as the "conductor" of the team, providing a single location to analyze, manage, and govern the activities of specialized agents.

- **Context Management**: Maintains and updates a shared knowledge base, ensuring all agents have access to real-time context and information.

- **Performance Monitoring**: Continuously tracks agent performance, detects inefficiencies, and can autonomously adjust workflows to optimize operations.

- **Resource Allocation**: Dynamically allocates computational resources based on the evolving needs and priorities of different tasks within the development process.

- **Hierarchical Management**: Functions as the supervisor in a hierarchical agent framework, establishing clear lines of authority and specialization similar to a corporate hierarchy.

### 5. CMS Specialist [105-cms-specialist-agent.mdc](mdc:.cursor/rules/105-cms-specialist-agent.mdc) for rule reference

#### Key Responsibilities

- **Content Management and Publishing**: Manage and maintain web presence using content management systems like WordPress, Drupal, Adobe Experience Manager (AEM), or SharePoint; build new pages, update existing content, and organize content effectively

- **Technical Implementation**: Configure and customize CMS platforms; develop content APIs with proper authentication, caching, and webhook implementation; create custom frontend interfaces that consume headless CMS content efficiently

- **Quality Assurance and Documentation**: Perform QA testing on features before releases to ensure high quality standards; maintain comprehensive documentation including platform release notes and technical specifications

- **Cross-Functional Collaboration**: Work closely with UX designers, solution architects, developers, and project management professionals to ensure alignment with overall product vision; manage priorities and dependencies

#### Additional important details about this role:

- **Technical Expertise**: Proficiency in specific CMS platforms (WordPress, Drupal, Contentful, Strapi, etc.) and related technologies like HTML/CSS, JavaScript, and API development

- **Performance Optimization**: Implement caching mechanisms, CDN integration, and code minimization to ensure optimal content delivery and site performance

- **Security and Compliance**: Collaborate with security teams to address and mitigate security issues; work with legal teams to ensure compliance with relevant regulations

- **Analytics and Reporting**: Experience with user experience measurement tools like Adobe Analytics or GA4 and usability tools for tracking content performance

- **Training and Support**: Provide CMS training and technical assistance to team members and clients; conduct product training and presentations to educate internal teams

### 6. Data Engineer [106-data-engineer-agent.mdc](mdc:.cursor/rules/106-data-engineer-agent.mdc) for rule reference

#### Key Responsibilities
- Design and implement scalable data pipelines for AI and machine learning models, handling diverse data types including text, images, videos, and tabular data
- Develop and manage data architectures that specifically support AI workflows and integration with machine learning frameworks
- Ensure data quality through preprocessing, validation, and bias mitigation techniques to create high-quality AI-ready datasets
- Implement techniques for enhancing AI training datasets, including data augmentation and synthetic data generation
- Monitor and maintain data pipeline performance, proactively identifying and resolving bottlenecks

#### Additional Role Details
- Bridges the gap between traditional data engineering and specialized AI data needs, requiring expertise in both domains
- Requires proficiency with AI-specific tools including vector databases, embedding libraries, and frameworks like TensorFlow, PyTorch, and Hugging Face
- Must balance technical implementation with ethical considerations, including regulatory compliance and privacy requirements
- Collaborates closely with data scientists to enable efficient model training, testing, and deployment
- Focuses on handling unstructured data processing which powers modern AI systems, differentiating from traditional data engineering roles

### 7. Documentation Specialist [107-doc-specialist-agent.mdc](mdc:.cursor/rules/107-doc-specialist-agent.mdc) for rule reference

**Responsibilities:**
- **Comprehensive Documentation:** Create and maintain detailed documentation for all project components, including codebases, model architectures, APIs, and system workflows.
- **Change Management:** Track and record all updates and revisions, ensuring a version-controlled history of changes.
- **User Guides & Tutorials:** Develop clear, step-by-step guides, tutorials, and examples to assist team members and users in understanding the system.
- **Quality Assurance:** Regularly review documentation to ensure accuracy and consistency, and update it as new features are integrated.
- **Knowledge Sharing:** Maintain a centralized repository (e.g., a wiki) for all project documentation and ensure it is accessible to all team members.

**Additional Details:**
- Collaborate closely with all team members to capture implementation details and nuances.
- Leverage automated documentation tools (e.g., Sphinx, Docusaurus) where appropriate.
- Ensure that documentation aligns with compliance and regulatory requirements.

## Communication Protocols

Agent Shared Scratchpad Communication System [200-scratchpad.mdc](mdc:.cursor/rules/200-scratchpad.mdc) for rule reference

### Standardized Scratchpad Naming

The scratchpad system also follows standardized naming conventions:

- **Primary Scratchpad Object**: `globalThis.SCRATCHPAD_SYSTEM`
- **Compatibility Alias**: `globalThis.SCRATCHPAD`

Both objects refer to the same instance through proxy synchronization, ensuring consistent access regardless of which name is used.

### Scratchpad Storage and Management

The scratchpad implements a dual-storage approach optimized for both performance and readability:

1. **SQLite Primary Storage**: 
   - Uses a local SQLite database stored at [scratchpad-system.db](mdc:.cursor/db/scratchpad-system.db)
   - Provides efficient querying, filtering, and indexing of messages
   - Ensures data integrity through transactional operations
   - Maintains relationships between messages, threads, and metadata
   - Enables fast access for real-time agent communication

## System Integration

The multi-agent system integrates with other core systems:

1. **Compatibility Layer**: [system-compatibility.js](mdc:.cursor/system-compatibility.js) ensures consistent naming conventions and synchronized references between `MULTI_AGENT_SYSTEM` and `AGENT_SYSTEM`.
2. **Memory System**: Stores agent states and conversation contexts using standardized `storeContext` and `getContext` methods.
3. **Scratchpad System**: Enables communication between agents through consistent interface methods.
4. **Banner System**: Displays visual confirmation of active agent and system status.

## Available Tools for the Agents
- **Brave-Search:**
  - MCP Server
  - Using this tool the agents can easily search the web for whatever they may need information wise on demand
  - gather up to date insights on everything

## System Verification

Verify the multi-agent system is properly initialized and using standardized naming conventions:

```javascript
// Verify system initialization using compatibility validation
if (globalThis.MULTI_AGENT_SYSTEM || globalThis.AGENT_SYSTEM) {
  // Use the standardized validation function from compatibility layer if available
  if (typeof globalThis.validateSystemConsistency === 'function') {
    const result = globalThis.validateSystemConsistency("multi-agent");
    
    if (!result) {
      console.error("Compatibility error: MULTI_AGENT_SYSTEM and AGENT_SYSTEM are not properly synchronized");
      
      // Attempt to fix using compatibility layer
      if (typeof globalThis.enhanceCompatibilityLayer === 'function') {
        console.log("Attempting to enhance compatibility layer...");
        globalThis.enhanceCompatibilityLayer();
      }
    }
  } else {
    // Manual compatibility check if validation function is not available
    if (globalThis.MULTI_AGENT_SYSTEM !== globalThis.AGENT_SYSTEM) {
      console.error("Manual check failed: MULTI_AGENT_SYSTEM and AGENT_SYSTEM references differ");
      
      // Apply simple fix if possible
      if (globalThis.MULTI_AGENT_SYSTEM && !globalThis.AGENT_SYSTEM) {
        globalThis.AGENT_SYSTEM = globalThis.MULTI_AGENT_SYSTEM;
        console.log("Applied fix: AGENT_SYSTEM now references MULTI_AGENT_SYSTEM");
      } else if (!globalThis.MULTI_AGENT_SYSTEM && globalThis.AGENT_SYSTEM) {
        globalThis.MULTI_AGENT_SYSTEM = globalThis.AGENT_SYSTEM;
        console.log("Applied fix: MULTI_AGENT_SYSTEM now references AGENT_SYSTEM");
      }
    }
  }
  
  // Verify active agent through standard interface
  try {
    const getActiveAgentFn = 
      (globalThis.MULTI_AGENT_SYSTEM && globalThis.MULTI_AGENT_SYSTEM.getActiveAgent) ||
      (globalThis.AGENT_SYSTEM && globalThis.AGENT_SYSTEM.getActiveAgent);
      
    if (typeof getActiveAgentFn === 'function') {
      const activeAgent = getActiveAgentFn.call(
        globalThis.MULTI_AGENT_SYSTEM || globalThis.AGENT_SYSTEM
      );
      console.log(`Active agent: ${activeAgent ? activeAgent.id || activeAgent : 'None'}`);
    } else {
      console.warn("getActiveAgent method not available on agent system");
    }
  } catch (error) {
    console.error(`Error accessing active agent: ${error.message}`);
  }
} else {
  console.error("Multi-agent system is not initialized");
}
```
