---
description: "Integration points between different memory subsystems to ensure a unified memory system"
globs: **/*
alwaysApply: true
---

# Memory System Integration

This module defines the integration points between different memory components to ensure a unified memory system.

## Integration Architecture

The memory system integrates three primary components:

1. **Short-Term Memory** - In-memory storage for current session context
   * @file .cursor/rules/301-short-term-memory.mdc

2. **Episodic Memory** - Storage for conversation history
   * @file .cursor/rules/302-episodic-memory.mdc

3. **Semantic Memory** - Knowledge graph for structured knowledge
   * @file .cursor/rules/303-semantic-memory.mdc

4. **Memory Controller** - Centralized interface for memory operations
   * @file .cursor/communication/systems/memory_controller.js

## Component Interactions

*   **Short-Term → Episodic:** Important short-term memory is persisted to episodic memory
*   **Episodic → Semantic:** Structured knowledge is extracted from conversations
*   **Semantic → Short-Term:** Relevant knowledge informs current reasoning
*   **All → Memory Bank:** All memory systems contribute to the memory bank files

## Cross-Component Operations

```javascript
// Memory consolidation from short-term to long-term memory
function consolidateMemory() {
  console.log("[Memory] Consolidating memory...");
  
  // Get current short-term memory context
  const workingContext = globalThis.MEMORY_SYSTEM.getContext("working_context") || [];
  const conversationSummary = globalThis.MEMORY_SYSTEM.getContext("conversation_summary");
  const sessionId = globalThis.MEMORY_SYSTEM.getContext("session_id");
  
  // Store important context in episodic memory
  if (conversationSummary) {
    globalThis.MEMORY_SYSTEM.storeConversation({
      role: "system",
      content: `Session summary: ${conversationSummary}`,
      session_id: sessionId,
      timestamp: Date.now(),
      metadata: { type: "summary" }
    });
  }
  
  // Extract knowledge from working context and store in semantic memory
  for (const context of workingContext) {
    if (context.importance >= 4) { // Only store important context
      globalThis.MEMORY_SYSTEM.storeKnowledge(
        context.topic,
        {
          category: "working_context",
          content: context.details,
          importance: mapImportance(context.importance),
          source: "short_term_memory",
          timestamp: Date.now()
        }
      );
    }
  }
  
  console.log("[Memory] Consolidation completed");
  
  function mapImportance(numericImportance) {
    if (numericImportance >= 5) return "high";
    if (numericImportance >= 3) return "medium";
    return "low";
  }
}

// Knowledge extraction from conversations
function extractKnowledgeFromEpisodic() {
  console.log("[Memory] Extracting knowledge from episodic memory...");
  
  // Get recent conversations
  const recentConversations = globalThis.MEMORY_SYSTEM.getRecentConversations(20);
  
  // Process each conversation for knowledge extraction
  for (const conversation of recentConversations) {
    extractKnowledgeFromConversation(conversation);
  }
  
  console.log("[Memory] Knowledge extraction completed");
}

// Context enrichment with relevant knowledge
function enrichContext(query) {
  console.log(`[Memory] Enriching context for query: ${query}`);
  
  // Get current context
  const currentContext = {
    session: globalThis.MEMORY_SYSTEM.getContext("session_id"),
    workingContext: globalThis.MEMORY_SYSTEM.getContext("working_context") || [],
    recentConversations: globalThis.MEMORY_SYSTEM.getRecentConversations(5)
  };
  
  // Find relevant knowledge (simplified implementation)
  let relevantKnowledge = [];
  
  // Look for knowledge related to keywords in the query
  const keywords = extractKeywords(query);
  for (const keyword of keywords) {
    const knowledge = globalThis.MEMORY_SYSTEM.getKnowledge(keyword);
    if (knowledge) {
      relevantKnowledge.push(knowledge);
    }
  }
  
  // Combine all context
  const enrichedContext = {
    ...currentContext,
    relevantKnowledge
  };
  
  // Store the enriched context
  globalThis.MEMORY_SYSTEM.storeContext("enriched_context", enrichedContext);
  
  console.log(`[Memory] Context enriched with ${relevantKnowledge.length} knowledge fragments`);
  
  return enrichedContext;
  
  function extractKeywords(text) {
    // Simplified keyword extraction (in a real implementation, this would be more sophisticated)
    return text.toLowerCase()
      .replace(/[^\w\s]/g, '')
      .split(/\s+/)
      .filter(word => word.length > 3);
  }
}

// Update memory bank with consolidated knowledge
function updateMemoryBank() {
  console.log("[Memory] Updating memory bank...");
  
  // This is a simplified implementation; in a real system, this would update actual files
  
  // Get knowledge by category
  const projectKnowledge = globalThis.MEMORY_SYSTEM.getKnowledge("project") || {};
  const systemKnowledge = globalThis.MEMORY_SYSTEM.getKnowledge("system") || {};
  const userKnowledge = globalThis.MEMORY_SYSTEM.getKnowledge("user") || {};
  
  // Update memory bank files (simulated)
  console.log("[Memory] Updated projectbrief.md with project knowledge");
  console.log("[Memory] Updated systemPatterns.md with system knowledge");
  console.log("[Memory] Updated activeContext.md with user knowledge");
  
  console.log("[Memory] Memory bank update completed");
}
```

## Implementation Details

```javascript
(function() {
  console.log("🧠 Initializing Memory Integration System...");
  
  try {
    // Check if memory system exists
    if (!globalThis.MEMORY_SYSTEM) {
      console.error("Memory system not initialized. Cannot initialize memory integration.");
      return;
    }
    
    // Create memory controller if it doesn't exist
    if (!globalThis.MEMORY_CONTROLLER) {
      globalThis.MEMORY_CONTROLLER = {
        initialized: true,
        
        // Consolidate memory - move short-term to long-term
        consolidateMemory: function() {
          console.log("[MEMORY CONTROLLER] Consolidating memory...");
          
          try {
            // Get working context
            const workingContext = globalThis.MEMORY_SYSTEM.getContext("working_context") || [];
            const conversationSummary = globalThis.MEMORY_SYSTEM.getContext("conversation_summary");
            const sessionId = globalThis.MEMORY_SYSTEM.getContext("session_id") || `session_${Date.now()}`;
            
            // Store session summary in episodic memory
            if (conversationSummary && typeof globalThis.MEMORY_SYSTEM.storeConversation === 'function') {
              globalThis.MEMORY_SYSTEM.storeConversation({
                role: "system",
                content: `Session summary: ${conversationSummary}`,
                session_id: sessionId,
                timestamp: Date.now(),
                metadata: { type: "summary" }
              });
              console.log("[MEMORY CONTROLLER] Stored session summary in episodic memory");
            }
            
            // Extract knowledge from working context
            let knowledgeExtracted = 0;
            
            if (workingContext.length > 0 && typeof globalThis.MEMORY_SYSTEM.storeKnowledge === 'function') {
              for (const context of workingContext) {
                // Only store important context items
                if (context.importance >= 4) {
                  const importance = context.importance >= 5 ? "high" : "medium";
                  
                  globalThis.MEMORY_SYSTEM.storeKnowledge(
                    context.topic,
                    {
                      category: "working_context",
                      content: context.details,
                      importance: importance,
                      source: "short_term_memory",
                      timestamp: Date.now()
                    }
                  );
                  
                  knowledgeExtracted++;
                }
              }
              
              console.log(`[MEMORY CONTROLLER] Extracted ${knowledgeExtracted} knowledge items from working context`);
            }
            
            return true;
          } catch (error) {
            console.error("[MEMORY CONTROLLER] Error consolidating memory:", error);
            return false;
          }
        },
        
        // Extract knowledge from episodic memory
        extractKnowledge: function() {
          console.log("[MEMORY CONTROLLER] Extracting knowledge from episodic memory...");
          
          try {
            // Get recent conversations
            if (typeof globalThis.MEMORY_SYSTEM.getRecentConversations !== 'function') {
              console.error("[MEMORY CONTROLLER] getRecentConversations function not available");
              return false;
            }
            
            const recentConversations = globalThis.MEMORY_SYSTEM.getRecentConversations(20);
            
            if (!Array.isArray(recentConversations) || recentConversations.length === 0) {
              console.log("[MEMORY CONTROLLER] No recent conversations found");
              return false;
            }
            
            // Extract knowledge
            let knowledgeExtracted = 0;
            
            for (const conversation of recentConversations) {
              // Skip system messages and non-text content
              if (conversation.role === 'system' || !conversation.content || typeof conversation.content !== 'string') {
                continue;
              }
              
              // Simple pattern matching for knowledge extraction
              // In a real implementation, this would use sophisticated NLP
              
              // Extract code-related knowledge
              if (conversation.content.includes('function') || 
                  conversation.content.includes('class') || 
                  conversation.content.includes('variable')) {
                
                if (typeof globalThis.MEMORY_SYSTEM.storeKnowledge === 'function') {
                  globalThis.MEMORY_SYSTEM.storeKnowledge(
                    'code_patterns',
                    {
                      category: 'code_snippets',
                      content: `Code discussion: ${conversation.content.substring(0, 100)}...`,
                      importance: 'medium',
                      source: 'conversation',
                      timestamp: Date.now()
                    }
                  );
                  
                  knowledgeExtracted++;
                }
              }
              
              // Extract error-related knowledge
              if (conversation.content.includes('error') || 
                  conversation.content.includes('bug') || 
                  conversation.content.includes('issue')) {
                
                if (typeof globalThis.MEMORY_SYSTEM.storeKnowledge === 'function') {
                  globalThis.MEMORY_SYSTEM.storeKnowledge(
                    'troubleshooting',
                    {
                      category: 'errors',
                      content: `Error discussion: ${conversation.content.substring(0, 100)}...`,
                      importance: 'high',
                      source: 'conversation',
                      timestamp: Date.now()
                    }
                  );
                  
                  knowledgeExtracted++;
                }
              }
            }
            
            console.log(`[MEMORY CONTROLLER] Extracted ${knowledgeExtracted} knowledge items from conversations`);
            return true;
          } catch (error) {
            console.error("[MEMORY CONTROLLER] Error extracting knowledge:", error);
            return false;
          }
        },
        
        // Enrich context with relevant knowledge
        enrichContext: function(query) {
          console.log(`[MEMORY CONTROLLER] Enriching context for query: ${query}`);
          
          try {
            // Basic context
            const enrichedContext = {
              query: query,
              timestamp: Date.now(),
              sessionId: globalThis.MEMORY_SYSTEM.getContext("session_id") || `session_${Date.now()}`
            };
            
            // Add working context
            enrichedContext.workingContext = globalThis.MEMORY_SYSTEM.getContext("working_context") || [];
            
            // Add recent conversations if available
            if (typeof globalThis.MEMORY_SYSTEM.getRecentConversations === 'function') {
              enrichedContext.recentConversations = globalThis.MEMORY_SYSTEM.getRecentConversations(5);
            }
            
            // Extract keywords and find relevant knowledge
            const keywords = query.toLowerCase()
              .replace(/[^\w\s]/g, '')
              .split(/\s+/)
              .filter(word => word.length > 3);
            
            let relevantKnowledge = [];
            
            if (typeof globalThis.MEMORY_SYSTEM.searchKnowledge === 'function') {
              for (const keyword of keywords) {
                const results = globalThis.MEMORY_SYSTEM.searchKnowledge(keyword, 2);
                if (results && results.length > 0) {
                  relevantKnowledge = relevantKnowledge.concat(results);
                }
              }
            } else if (typeof globalThis.MEMORY_SYSTEM.getKnowledge === 'function') {
              // Fall back to direct knowledge retrieval if search is not available
              for (const keyword of keywords) {
                const knowledge = globalThis.MEMORY_SYSTEM.getKnowledge(keyword);
                if (knowledge) {
                  relevantKnowledge.push(knowledge);
                }
              }
            }
            
            // Add relevant knowledge to context
            enrichedContext.relevantKnowledge = relevantKnowledge;
            
            // Store enriched context
            globalThis.MEMORY_SYSTEM.storeContext("enriched_context", enrichedContext);
            
            console.log(`[MEMORY CONTROLLER] Context enriched with ${relevantKnowledge.length} relevant knowledge items`);
            return enrichedContext;
          } catch (error) {
            console.error("[MEMORY CONTROLLER] Error enriching context:", error);
            return { query };
          }
        },
        
        // Process user interaction with full memory integration
        processInteraction: function(userQuery, responseCallback) {
          console.log(`[MEMORY CONTROLLER] Processing interaction: ${userQuery.substring(0, 50)}...`);
          
          try {
            // 1. Store query in short-term memory
            globalThis.MEMORY_SYSTEM.storeContext("current_query", userQuery);
            
            // 2. Store query in episodic memory
            if (typeof globalThis.MEMORY_SYSTEM.storeConversation === 'function') {
              globalThis.MEMORY_SYSTEM.storeConversation({
                role: "user",
                content: userQuery,
                timestamp: Date.now()
              });
            }
            
            // 3. Enrich context with relevant knowledge
            const enrichedContext = this.enrichContext(userQuery);
            
            // 4. Generate response (simulated in this demo)
            const response = `Response to "${userQuery.substring(0, 30)}..." based on ${enrichedContext.relevantKnowledge?.length || 0} knowledge fragments`;
            
            // 5. Store response in short-term memory
            globalThis.MEMORY_SYSTEM.storeContext("last_response", response);
            
            // 6. Store response in episodic memory
            if (typeof globalThis.MEMORY_SYSTEM.storeConversation === 'function') {
              globalThis.MEMORY_SYSTEM.storeConversation({
                role: "assistant",
                content: response,
                timestamp: Date.now()
              });
            }
            
            // 7. Periodically consolidate memory
            const interactionCount = (globalThis.MEMORY_SYSTEM.getContext("interaction_count") || 0) + 1;
            globalThis.MEMORY_SYSTEM.storeContext("interaction_count", interactionCount);
            
            if (interactionCount % 5 === 0) {
              this.consolidateMemory();
              this.extractKnowledge();
            }
            
            // 8. Call response callback if provided
            if (typeof responseCallback === 'function') {
              responseCallback(response, enrichedContext);
            }
            
            return response;
          } catch (error) {
            console.error("[MEMORY CONTROLLER] Error processing interaction:", error);
            
            // Fallback response
            return `I encountered an issue while processing your query: "${userQuery.substring(0, 30)}..."`;
          }
        }
      };
      
      console.log("✅ Created Memory Controller");
      
      // Register memory controller with the registry if available
      if (globalThis.MEMORY_REGISTRY && typeof globalThis.MEMORY_REGISTRY.registerIntegration === 'function') {
        globalThis.MEMORY_REGISTRY.registerIntegration('memory_controller', globalThis.MEMORY_CONTROLLER);
      }
    }
    
    // Add system banner if banners exist
    if (Array.isArray(globalThis.nextResponsePrepend)) {
      // Check if we already have a memory banner
      const hasMemoryBanner = globalThis.nextResponsePrepend.some(banner => 
        banner.includes("MEMORY SYSTEM") || banner.includes("UNIFIED MEMORY")
      );
      
      if (!hasMemoryBanner) {
        globalThis.nextResponsePrepend.push("🧠 [UNIFIED MEMORY SYSTEM: ACTIVE]");
      }
    }
    
    console.log("✅ Memory Integration System initialized successfully");
  } catch (error) {
    console.error("❌ Error initializing memory integration:", error);
  }
})();
```

## Workflow Integration

```javascript
// User interaction workflow
function processUserInteraction(userQuery) {
  // 1. Store user query in short-term memory
  globalThis.MEMORY_SYSTEM.storeContext("current_query", userQuery);
  
  // 2. Store user query in episodic memory
  globalThis.MEMORY_SYSTEM.storeConversation({
    role: "user",
    content: userQuery,
    timestamp: Date.now()
  });
  
  // 3. Enrich context with relevant knowledge
  const enrichedContext = enrichContext(userQuery);
  
  // 4. Generate response based on enriched context
  const response = generateResponse(userQuery, enrichedContext);
  
  // 5. Store response in short-term memory
  globalThis.MEMORY_SYSTEM.storeContext("last_response", response);
  
  // 6. Store response in episodic memory
  globalThis.MEMORY_SYSTEM.storeConversation({
    role: "assistant",
    content: response,
    timestamp: Date.now()
  });
  
  // 7. Extract knowledge from the interaction
  extractKnowledgeFromConversation({
    role: "user",
    content: userQuery
  });
  
  extractKnowledgeFromConversation({
    role: "assistant",
    content: response
  });
  
  // 8. Periodically consolidate memory
  const sessionMessages = globalThis.MEMORY_SYSTEM.getContext("session_message_count") || 0;
  globalThis.MEMORY_SYSTEM.storeContext("session_message_count", sessionMessages + 2);
  
  if ((sessionMessages + 2) % 10 === 0) {
    consolidateMemory();
    updateMemoryBank();
  }
  
  return response;
  
  function generateResponse(query, context) {
    // This is a simplified implementation; in a real system, this would use an LLM
    return `Response to "${query}" based on context with ${context.recentConversations.length} conversations and ${context.relevantKnowledge.length} knowledge fragments.`;
  }
}
```

## Memory Controller Interface

The Memory Controller provides a unified interface for all memory operations:

*   **storeMemory(memoryType, data)** - Store data in the specified memory type
*   **retrieveMemory(memoryType, query)** - Retrieve data from the specified memory type
*   **consolidateMemory()** - Move important short-term memory to long-term memory
*   **enrichContext(query)** - Enhance the current context with relevant knowledge
*   **processInteraction(query, callback)** - Process a complete user interaction

## Integration with Multi-Agent System

The memory system integrates with the multi-agent system through the scratchpad communication system:

*   **Agent Memory Access:** All agents have access to the shared memory system
*   **Memory-Aware Communication:** Agents communicate with awareness of shared knowledge
*   **Cross-Agent Knowledge Sharing:** Knowledge is shared between agents through the memory system

## Required Behavior

*   ALWAYS ensure consistency across different memory components
*   REGULARLY synchronize the memory bank with the memory system
*   MAINTAIN a unified view of knowledge across all memory components
*   LEVERAGE all memory components when generating responses
*   NEVER access memory components in isolation; always use the integrated system
*   PRIORITIZE the correct workflow for memory operations 