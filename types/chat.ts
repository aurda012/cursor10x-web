/**
 * Core chat interfaces for the Cursor10x Web App
 */

/**
 * Represents a chat message from either the user or the agent
 */
export interface Message {
  id: string;
  sender: "user" | "agent";
  content: string;
  timestamp?: number;
  artifactData?: {
    type: "blueprint" | "architecture" | "guide" | "tasks";
    content: string;
  };
  // Stream properties for artifact viewers
  blueprintStream?: ReadableStream<Uint8Array>;
  onBlueprintComplete?: (content: string) => void;
  architectureStream?: ReadableStream<Uint8Array>;
  onArchitectureComplete?: (content: string) => void;
  guideStream?: ReadableStream<Uint8Array>;
  onGuideComplete?: (content: string) => void;
  tasksStream?: ReadableStream<Uint8Array>;
  onTasksComplete?: (content: string) => void;
}

/**
 * Represents the user's answers to the agent's questions
 */
export interface UserAnswers {
  [key: string]: string;
}

/**
 * Represents the state managed by Zustand
 */
export interface ChatState {
  // Messages in the chat
  messages: Message[];

  // User's answers to the agent's questions
  userAnswers: UserAnswers;

  // Index of the current question being asked
  currentQuestionIndex: number;

  // Status flags
  isAgentProcessing: boolean;
  isComplete: boolean;
  isPackaging: boolean;
  packageReady: boolean;

  // Status message to display during processing
  statusMessage: string | null;

  // Artifacts generated by the AI
  generatedArtifacts: Record<string, string>;

  // Current artifact stream being generated
  currentArtifactStream: ReadableStream<Uint8Array> | null;

  // Current artifact type being generated
  currentArtifactType: string | null;

  // Callback for when an artifact is complete
  onComplete: ((content: string) => void) | null;

  // Actions
  addMessage: (message: Omit<Message, "id" | "timestamp">) => void;
  addStreamMessage: (
    artifactType: "blueprint" | "architecture" | "guide" | "tasks",
    stream: ReadableStream<Uint8Array>,
    completionHandler: (content: string) => void
  ) => string; // Returns the message ID
  updateAnswerAndProgress: (answer: string) => void;
  setProcessing: (isProcessing: boolean, status?: string) => void;
  setPackaging: (isPackaging: boolean, status?: string) => void;
  addArtifact: (artifactName: string, content: string) => void;
  setPackageReady: (isReady: boolean) => void;
  setComplete: (isComplete: boolean) => void;
  clearArtifactStream: () => void;

  // Stream management
  setArtifactStream: (
    stream: ReadableStream<Uint8Array> | null,
    artifactType: string | null,
    completionHandler: ((content: string) => void) | null
  ) => boolean;

  // Artifact completion handlers
  handleBlueprintComplete: (blueprintContent: string) => void;
  handleArchitectureComplete: (architectureContent: string) => void;
  handleGuideComplete: (guideContent: string) => void;
  handleTasksComplete: (tasksContent: string) => void;

  // New properties for the ChatState
  processing: boolean;
  artifactStream: ReadableStream<Uint8Array> | null;
  artifactContent: string | null;
  isShowingSettings: boolean;
  // Map of saved stream copies for potential reuse
  savedStreams: {
    [key: string]: ReadableStream<Uint8Array>;
  };

  // New actions
  updateUserAnswers: (answers: UserAnswers) => void;
  clearChat: () => void;
  setArtifactContent: (content: string | null) => void;
  toggleSettings: () => void;
  startArtifactGeneration: () => void;
}
