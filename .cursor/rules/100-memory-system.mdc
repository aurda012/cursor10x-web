---
description: Comprehensive Memory System architecture for autonomous Cursor operation
globs: **/*
alwaysApply: true
---

# Memory System Architecture

The Cursor10x Memory System provides persistent context awareness across conversations using MCP tools for:
- Short-term memory (recent messages, context)
- Long-term memory (milestones, decisions, requirements)
- Episodic memory (chronological actions and events)

## Response Start Sequence

The AI **MUST** execute this exact sequence at the start of EVERY response, without exception:

1. Generate and display memory banner
   ```
   mcp_cursor10x_generateBanner({})
   ```

2. Retrieve comprehensive context
   ```
   mcp_cursor10x_getComprehensiveContext({})
   ```

## Conversation End Sequence

The AI **MUST** execute this sequence before ending a conversation without exception:

1. Store important assistant response
   ```
   mcp_cursor10x_endConversation({
    content: "Content of the assistant's final message",
    milestone_title: "Title for the completion milestone",
    milestone_description: "Description of what was accomplished",
    important: "optional |  Importance level (low, medium, high, critical)",
    metadata: "Additional metadata for the operations" 
  })
  ```

## Automatic Memory Tools Usage

The AI **MUST** use the following memory tools automatically throughout every interaction:

- **For User Messages**
  ```
  mcp_cursor10x_storeUserMessage({
    content: "User message content", 
    importance: "medium"
  })
  ```

- **For Assistant Messages**
  ```
  mcp_cursor10x_storeAssistantMessage({
    content: "Assistant response content", 
    importance: "medium"
  })
  ```

- **For Project Milestones**
  ```
  mcp_cursor10x_storeMilestone({
    title: "Milestone Title", 
    description: "Description of what was accomplished",
    importance: "medium"
  })
  ```

- **For Project Decisions**
  ```
  mcp_cursor10x_storeDecision({
    title: "Decision Title", 
    content: "What was decided", 
    reasoning: "Why it was decided",
    importance: "medium"
  })
  ```

- **For Project Requirements**
  ```
  mcp_cursor10x_storeRequirement({
    title: "Requirement Title", 
    content: "Description of requirement",
    importance: "medium"
  })
  ```

- **For Active File Tracking**
  ```
  mcp_cursor10x_trackActiveFile({
    filename: "path/to/file", 
    action: "view"
  })
  ```

## Context Gathering

The AI **MUST** use context tools at the start of EVERY response without exception:

```
mcp_cursor10x_getComprehensiveContext({})

mcp_cursor10x_getRecentMessages({limit: 5})

mcp_cursor10x_getActiveFiles({limit: 3})
```

## Memory System Health

The AI **SHOULD** check memory system health when experiencing context issues:

```
mcp_cursor10x_checkHealth({})

mcp_cursor10x_getMemoryStats({})
```

## Banner Generation

The AI **MUST** generate a memory banner at the start of EVERY response:

```
mcp_cursor10x_generateBanner({})
```

## Importance Levels

When storing memory items, use appropriate importance levels:
- **low**: General information, routine operations
- **medium**: Useful context, standard work
- **high**: Critical decisions, major features
- **critical**: Core architecture, security, data-integrity

## Automatic Data Storage Triggers

The AI **MUST** automatically store memories based on these triggers without exception:

1. **User Messages**
   - Store EVERY message containing requirements, decisions, or important information
   - Store EVERY message containing questions or instructions about the project
   
2. **Assistant Messages**
   - Store EVERY response providing explanations or solutions
   - Store EVERY response making recommendations or drawing conclusions
   
3. **Milestones**
   - Store when completing ANY task or feature
   - Store when resolving ANY issue or implementing a solution
   
4. **Active Files**
   - Track EVERY code file being discussed or modified
   - Track EVERY configuration or documentation file referenced
