---
description: "Enforces scratchpad for all interactions"
globs: **/*
alwaysApply: true
---
# Scratchpad and Banner Enforcer

This rule ensures that the system banners and scratchpad communication system are properly initialized at the start of each chat session. It acts as a safety mechanism that activates even if other initialization methods fail.

## Automatic Enforcer

```javascript
// Auto-activation process - runs immediately when file is loaded
(function() {
  console.log("üõ°Ô∏è Scratchpad and Banner Enforcer activating...");
  
  try {
    // Check if activation script exists and execute it
    const fs = require('fs');
    const path = require('path');
    const activationPath = path.join(process.cwd(), '.cursor/communication/systems/activation.js');
    
    if (fs.existsSync(activationPath)) {
      console.log("üîÑ Running activation script from enforcer...");
      try {
        // Using require to execute the activation script
        require(activationPath);
      } catch (error) {
        console.error("‚ùå Error executing activation script:", error);
        performDirectActivation();
      }
    } else {
      console.log("‚ö†Ô∏è Activation script not found, performing direct activation...");
      performDirectActivation();
    }
    
    // Ensure banners are displayed in next response
    ensureBanners();
    
  } catch (error) {
    console.error("‚ùå Critical error in Scratchpad Enforcer:", error);
    // Last resort fallback
    addEmergencyBanner();
  }
  
  /**
   * Perform direct activation of systems
   */
  function performDirectActivation() {
    console.log("üîß Direct system activation in progress...");
    
    // Initialize project name
    const PROJECT_NAME = path.basename(process.cwd());
    
    // Activate multi-agent system
    if (!globalThis.MULTI_AGENT_SYSTEM) {
      globalThis.MULTI_AGENT_SYSTEM = {
        initialized: true,
        active_agent: 'PM',
        agents: {
          PM: { name: 'Project Manager/Planner' },
          QA: { name: 'Quantitative Analyst' },
          DE: { name: 'Data Engineer' },
          SD: { name: 'Software Developer' },
          RS: { name: 'Risk Specialist' },
          MLE: { name: 'Machine Learning Engineer' },
          DS: { name: 'Documentation Specialist' }
        }
      };
      console.log("‚úÖ Created multi-agent system (enforcer)");
    }
    
    // Activate memory system
    if (!globalThis.MEMORY_SYSTEM) {
      globalThis.MEMORY_SYSTEM = {
        initialized: true,
        shortTerm: {},
        episodic: [],
        semantic: {},
        storeContext: (key, value) => { 
          globalThis.MEMORY_SYSTEM.shortTerm[key] = value; 
          return true;
        },
        getContext: (key) => globalThis.MEMORY_SYSTEM.shortTerm[key]
      };
      console.log("‚úÖ Created memory system (enforcer)");
    }
    
    // Set current date
    if (!globalThis.CURRENT_DATE) {
      const currentYear = 2025;
      const today = new Date();
      today.setFullYear(currentYear);
      
      globalThis.CURRENT_DATE = {
        year: currentYear,
        date: today,
        formatted: {
          long: today.toLocaleDateString('en-US', { 
            weekday: 'long', 
            year: 'numeric', 
            month: 'long', 
            day: 'numeric' 
          })
        }
      };
      console.log("‚úÖ Set current date (enforcer)");
    }
    
    // Create MCP registry
    if (!globalThis.MCP_REGISTRY) {
      globalThis.MCP_REGISTRY = {
        initialized: true,
        available_servers: {
          database: { 
            name: 'Database Server',
            capabilities: ['database_query'] 
          },
          web_search: { 
            name: 'Web Search Server',
            capabilities: ['web_search'] 
          }
        }
      };
      console.log("‚úÖ Created MCP registry (enforcer)");
    }
    
    // Set URDAFX system object
    globalThis.URDAFX_SYSTEM = {
      initialized: true,
      components: {
        multiAgentSystem: true,
        memorySystem: true,
        mcpSystem: true,
        dateSystem: true
      },
      config: {
        project_name: PROJECT_NAME,
        current_year: 2025
      }
    };
    
    console.log("‚úÖ Direct system activation completed");
  }
  
  /**
   * Ensure banners are in place
   */
  function ensureBanners() {
    // Initialize nextResponsePrepend if it doesn't exist
    if (!globalThis.nextResponsePrepend) {
      globalThis.nextResponsePrepend = [];
    }
    
    // Check if banners are already present
    let hasBanners = false;
    for (const line of globalThis.nextResponsePrepend) {
      if (line.includes("Multi-Agent System Active") || 
          line.includes("Memory System Active") ||
          line.includes("MCP Servers")) {
        hasBanners = true;
        break;
      }
    }
    
    // Add banners if not present
    if (!hasBanners) {
      console.log("üéå Adding system banners (enforcer)...");
      
      // Clear any existing entries to avoid duplication
      globalThis.nextResponsePrepend = [];
      
      // Add standard banners
      globalThis.nextResponsePrepend.push("ü§ñ **Multi-Agent System Active:** 7 specialized agents ready");
      globalThis.nextResponsePrepend.push("üß† **Memory System Active:** Short and long-term memory enabled");
      
      if (globalThis.MCP_REGISTRY && globalThis.MCP_REGISTRY.available_servers) {
        const numServers = Object.keys(globalThis.MCP_REGISTRY.available_servers).length;
        globalThis.nextResponsePrepend.push(`üîå **MCP Servers:** ${numServers} servers available`);
      }
      
      if (globalThis.CURRENT_DATE && globalThis.CURRENT_DATE.formatted) {
        globalThis.nextResponsePrepend.push(`üóìÔ∏è **Current Date:** ${globalThis.CURRENT_DATE.formatted.long}`);
      }
      
      console.log(`‚úÖ Added ${globalThis.nextResponsePrepend.length} banners (enforcer)`);
    }
  }
  
  /**
   * Add emergency banner as last resort
   */
  function addEmergencyBanner() {
    console.log("üö® Adding emergency banner...");
    
    if (!globalThis.nextResponsePrepend) {
      globalThis.nextResponsePrepend = [];
    }
    
    // Clear array and add minimal emergency banner
    globalThis.nextResponsePrepend = [];
    globalThis.nextResponsePrepend.push("ü§ñ **URDAFX Multi-Agent System Active (Emergency Mode)**");
    
    console.log("‚úÖ Emergency banner added");
  }
  
  console.log("‚úÖ Scratchpad and Banner Enforcer activated successfully");
})();
```

## Verification Process

The enforcer verifies and ensures:

1. The system initialization script is executed if available
2. All required systems (multi-agent, memory, date, MCP) are initialized even if other methods fail
3. The system banners are correctly displayed at the beginning of each response
4. As a last resort, an emergency banner is displayed if all else fails

This provides multiple layers of redundancy to ensure the system banners and core functionality are always available.

## Always-On Protection

This enforcer runs automatically with every file access and is attached to all globs to ensure maximum coverage. It acts as a safety net that catches any initialization failures from other components.

// Dependent Rules
[100-multi-agent-system.mdc](mdc:.cursor/rules/100-multi-agent-system.mdc) for rule reference 
[200-scratchpad.mdc](mdc:.cursor/rules/200-scratchpad.mdc) for rule reference
